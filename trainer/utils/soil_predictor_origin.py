from math import tanh, asinh, log

def predict_uu_argile(FC, WL, IP, MC, SR, ROD):
    # --- type safety: make sure all are floats ---
    try:
        FC, WL, IP, MC, SR, ROD = map(float, (FC, WL, IP, MC, SR, ROD))
    except Exception as e:
        raise ValueError(
            f"type coercion failed in predict_uu_argile: "
            f"FC={FC!r}, WL={WL!r}, IP={IP!r}, MC={MC!r}, SR={SR!r}, ROD={ROD!r} ({e})"
        )

    # --- domain guards for log() arguments ---
    # log(((-10 + SR)/(159.02 - SR)))   -> requires 10 < SR < 159.02
    # log(((-6.27 + MC)/(57.41 - MC)))  -> requires 6.27 < MC < 57.41
    # log(((-1.368 + ROD)/(2.043 - ROD))) -> requires 1.368 < ROD < 2.043
    EPS = 1e-6
    SR  = max(10.0   + EPS, min(159.02 - EPS, SR))
    MC  = max(6.27   + EPS, min(57.41 - EPS, MC))
    ROD = max(1.368  + EPS, min(2.043  - EPS, ROD))

    # --- convenience shorthands (keeps expressions clean) ---
    LSR  = log(((-10.0 + SR) / (159.02 - SR)))
    LMC  = log(((-6.27 + MC) / (57.41 - MC)))
    LROD = log(((-1.368 + ROD) / (2.043 - ROD)))

    # H1_1: fixed parentheses so SR term is ((-10 + SR)/(159.02 - SR))
    H1_1 = tanh((
        17.6166601112991
        + 1.01689009994152 * asinh((-42680.1908613783 + 421.347040838803 * FC))
        + 0.754441122421   * asinh((-20.1046357428199 + 0.476955884448496 * WL))
        + -4.89726633600721* asinh((-4.46284354379474 + 0.207209815083337 * IP))
        + -2.48474584473893* (LSR + 4.68409071660135 * LMC + -2.15418935605389 * LROD)
    ))

    H1_2 = tanh((
        29.9936906676825
        + 1.97731544650444 * asinh((-42680.1908613783 + 421.347040838803 * FC))
        + -2.47000932478366* asinh((-20.1046357428199 + 0.476955884448496 * WL))
        + -0.47224252581147* asinh((-4.46284354379474 + 0.207209815083337 * IP))
        + -1.87942419331308* LSR
        + 3.08465719201965 * LMC
        + 3.30663162057406 * LROD
    ))

    H1_3 = tanh((
        7.03970585481551
        + 0.619214828622372* asinh((-42680.1908613783 + 421.347040838803 * FC))
        + 2.28129872022424 * asinh((-20.1046357428199 + 0.476955884448496 * WL))
        + -2.16622643534251* asinh((-4.46284354379474 + 0.207209815083337 * IP))
        + -3.3465389499881 * LSR
        + 0.888863262184926* LMC
        + -2.13923582441618* LROD
    ))

    H1_4 = tanh((
        2.05875684111371
        + 0.236726367942498* asinh((-42680.1908613783 + 421.347040838803 * FC))
        + -0.212771226251738* asinh((-20.1046357428199 + 0.476955884448496 * WL))
        + -0.386844329919493* asinh((-4.46284354379474 + 0.207209815083337 * IP))
        + 0.306046634415579 * LSR
        + -0.340630750041054* LMC
        + -0.319116703855381* LROD
    ))

    H1_5 = tanh((
        27.6770376286068
        + 2.47694323896399 * asinh((-42680.1908613783 + 421.347040838803 * FC))
        + 1.7667442933938  * asinh((-20.1046357428199 + 0.476955884448496 * WL))
        + 0.122522048653745* asinh((-4.46284354379474 + 0.207209815083337 * IP))
        + -3.55514631492029* LSR
        + 7.39380585392073 * LMC
        + -1.75948992862054* LROD
    ))

    H1_6 = tanh((
        -16.246415875064
        + -1.26231242617499* asinh((-42680.1908613783 + 421.347040838803 * FC))
        + 4.11943312225382 * asinh((-20.1046357428199 + 0.476955884448496 * WL))
        + 4.8712148596984  * asinh((-4.46284354379474 + 0.207209815083337 * IP))
        + 11.3848682506058 * LSR
        + 2.13212228081299 * LMC
        + 6.13065234856762 * LROD
    ))

    H2_1 = tanh((
        -12.0701864127525
        + -0.966889723527743* asinh((-42680.1908613783 + 421.347040838803 * FC))
        + 0.0847222417256349* asinh((-20.1046357428199 + 0.476955884448496 * WL))
        + -0.375107778737155* asinh((-4.46284354379474 + 0.207209815083337 * IP))
        + 9.29538720494411  * LSR
        + 1.30582269030045  * LMC
        + -0.136759470647474* LROD
    ))

    H2_2 = tanh((
        -6.8819921640178
        + -0.0952836321743325* asinh((-42680.1908613783 + 421.347040838803 * FC))
        + 1.80564413440009  * asinh((-20.1046357428199 + 0.476955884448496 * WL))
        + -0.213067063844942* asinh((-4.46284354379474 + 0.207209815083337 * IP))
        + 0.550538681447175 * LSR
        + -4.66111009251257 * LMC
        + -1.9859834811898  * LROD
    ))

    H2_3 = tanh((
        6.62076903366415
        + 1.79354174653269 * asinh((-42680.1908613783 + 421.347040838803 * FC))
        + 0.788062847764849* asinh((-20.1046357428199 + 0.476955884448496 * WL))
        + -2.13413130063795* asinh((-4.46284354379474 + 0.207209815083337 * IP))
        + 2.89844426442628 * LSR
        + -10.4313209147203* LMC
        + -4.23798710978294* LROD
    ))

    H2_4 = tanh((
        -19.0007670231883
        + -0.760141094213983* asinh((-42680.1908613783 + 421.347040838803 * FC))
        + 2.53635859257494 * asinh((-20.1046357428199 + 0.476955884448496 * WL))
        + -4.90087828830336* asinh((-4.46284354379474 + 0.207209815083337 * IP))
        + 5.25811230793497 * LSR
        + -3.35663760700737* LMC
        + 1.23987328222146 * LROD
    ))

    H2_5 = tanh((
        -8.42245083518752
        + -1.08394124617343* asinh((-42680.1908613783 + 421.347040838803 * FC))
        + 0.0288798579489356* asinh((-20.1046357428199 + 0.476955884448496 * WL))
        + -0.5491118988904 * asinh((-4.46284354379474 + 0.207209815083337 * IP))
        + 1.9877816421344  * LSR
        + 2.59359846629423 * LMC
        + -0.420020027178332* LROD
    ))

    H2_6 = tanh((
        2.64924853144421
        + 0.128648143510697* asinh((-42680.1908613783 + 421.347040838803 * FC))
        + -0.711097627016106* asinh((-20.1046357428199 + 0.476955884448496 * WL))
        + 0.511846056696504* asinh((-4.46284354379474 + 0.207209815083337 * IP))
        + 0.279323710439266* LSR
        + 0.193149614191718* LMC
        + 0.0296619695325305* LROD
    ))

    COH_Pred = (
        43.6777925723906
        + 10.9665890032047 * H1_1
        + 11.8350890754497 * H1_2
        + -12.2499660542065* H1_3
        + -11.3867639032321* H1_4
        + -4.26059175794546* H1_5
        + 14.142854124806  * H1_6
    )

    PHI_Pred = (
        17.8298477490052
        + -7.9609835429472 * H2_1
        + 5.66463774688691 * H2_2
        + -4.20743982899269* H2_3
        + 17.381246111229  * H2_4
        + 3.48656833309945 * H2_5
        + 10.6114049491861 * H2_6
    )

    return round(max(COH_Pred, 0), 2), round(max(PHI_Pred, 0), 2)

def predict_uu_limon_marne(FC, WL, IP, MC, SR, ROD):
    # ---- type safety ----
    try:
        FC, WL, IP, MC, SR, ROD = map(float, (FC, WL, IP, MC, SR, ROD))
    except Exception as e:
        raise ValueError(
            f"type coercion failed in predict_uu_limon_marne: "
            f"FC={FC!r}, WL={WL!r}, IP={IP!r}, MC={MC!r}, SR={SR!r}, ROD={ROD!r} ({e})"
        )

    # ---- domain guards for log() arguments ----
    # H3_* uses log((SR - 7.35794556)/(166.93 - SR)) ⇒ 7.35794556 < SR < 166.93
    # H4_* uses log((98.519426429255 + SR)/(182.302972186285 - SR)) ⇒ SR < 182.302972186285 (we already enforce < 166.93 so it's stricter)
    # H3_* uses log((32.9144506754189 + MC)/(660.467050073002 - MC)) ⇒ MC < 660.467050073002
    # H3_* uses log((908.942555215076 + IP)/(126.335099837998 - IP)) ⇒ IP < 126.335099837998
    EPS = 1e-6
    SR  = max(7.35794556 + EPS, min(166.93 - EPS, SR))
    MC  = min(660.467050073002 - EPS, MC)  # lower bound not binding (MC >= 0 in UI)
    IP  = min(126.335099837998 - EPS, IP)  # lower bound not binding (IP >= 0 in UI)

    # ---- reusable log terms (correct parentheses, computed once) ----
    LSR_A = log((SR - 7.35794556) / (166.93 - SR))  # used by H3_*
    LMC   = log((32.9144506754189 + MC) / (660.467050073002 - MC))
    LIP   = log((908.942555215076 + IP) / (126.335099837998 - IP))
    LSR_B = log((98.519426429255 + SR) / (182.302972186285 - SR))  # used by H4_*

    # ---- original model with shared terms ----
    H3_1 = tanh((
        -31.5229554257887
        + -1.70521381805309 * asinh((-167.502018712005 + 1.67146506178187 * FC))
        + 5.11399053683411  * asinh((-22.3764205935919 + 0.381082571128661 * WL))
        + -31.5006416338158 * asinh((-5.47791140115305 + 3.32037163387292 * ROD))
        + 103.95078849445   * LSR_A
        + -402.753533516824 * LMC
        + -433.198307736126 * LIP
    ))

    H3_2 = tanh((
        507.97026402252
        + 7.66895795211658  * asinh((-167.502018712005 + 1.67146506178187 * FC))
        + 14.7089279676393  * asinh((-22.3764205935919 + 0.381082571128661 * WL))
        + 8.16325097580672  * asinh((-5.47791140115305 + 3.32037163387292 * ROD))
        + 0.172591218932824 * LSR_A
        + 277.421264710065  * LMC
        + 82.9071199901558  * LIP
    ))

    H3_3 = tanh((
        1045.79487157982
        + -0.617760314704081* asinh((-167.502018712005 + 1.67146506178187 * FC))
        + -20.9048875903364 * asinh((-22.3764205935919 + 0.381082571128661 * WL))
        + 103.986634520245  * asinh((-5.47791140115305 + 3.32037163387292 * ROD))
        + -34.2443239338218 * LSR_A
        + 543.108147009952  * LMC
        + 116.284373519868  * LIP
    ))

    H3_4 = tanh((
        304.368850518421
        + 25.890141379873   * asinh((-167.502018712005 + 1.67146506178187 * FC))
        + -6.05213311600009 * asinh((-22.3764205935919 + 0.381082571128661 * WL))
        + -63.7138550917429 * asinh((-5.47791140115305 + 3.32037163387292 * ROD))
        + -28.4509019829152 * LSR_A
        + 22.8836614642079  * LMC
        + -106.124092841601 * LIP
    ))

    H3_5 = tanh((
        1427.11109931436
        + 23.4860947045643  * asinh((-167.502018712005 + 1.67146506178187 * FC))
        + 2.05932548945955  * asinh((-22.3764205935919 + 0.381082571128661 * WL))
        + 4.54383588425403  * asinh((-5.47791140115305 + 3.32037163387292 * ROD))
        + -8.02955816494951 * LSR_A
        + 381.588054056619  * LMC
        + -199.053280901676 * LIP
    ))

    H3_6 = tanh((
        -273.676600395532
        + -15.5095259311134 * asinh((-167.502018712005 + 1.67146506178187 * FC))
        + -26.7558685629265 * asinh((-22.3764205935919 + 0.381082571128661 * WL))
        + 17.3140038977055  * asinh((-5.47791140115305 + 3.32037163387292 * ROD))
        + -20.5296379113814 * LSR_A
        + -225.65779756435  * LMC
        + -133.534201703339 * LIP
    ))

    H3_7 = tanh((
        2193.36407706631
        + 13.3508758442551  * asinh((-167.502018712005 + 1.67146506178187 * FC))
        + 17.1558538882601  * asinh((-22.3764205935919 + 0.381082571128661 * WL))
        + 35.5311261677415  * asinh((-5.47791140115305 + 3.32037163387292 * ROD))
        + 31.8328036220922  * LSR_A
        + 333.430148987104  * LMC
        + -576.942808714057 * LIP
    ))

    H3_8 = tanh((
        -88.7525298041239
        + -1.32779872115249 * asinh((-167.502018712005 + 1.67146506178187 * FC))
        + -8.91152437863537 * asinh((-22.3764205935919 + 0.381082571128661 * WL))
        + 40.0925904387081  * asinh((-5.47791140115305 + 3.32037163387292 * ROD))
        + -111.220028789681 * LSR_A
        + 450.695994415754  * LMC
        + 533.145345366653  * LIP
    ))

    H4_1 = tanh((
        12.3050394775253
        + 2.99467243918676  * asinh((-143.832666963863 + 1.43672787674969 * FC))
        + 0.794280733212081 * asinh((-25.2433770668038 + 0.428714918219113 * WL))
        + -1.97732468216598 * asinh((-24.4715557253113 + 14.7602602070397 * ROD))
        + 1.82453834430348  * asinh((-7.88899309784633 + 0.220244583178519 * IP))
        + -5.7840674417286  * asinh((-3.15192082972475 + 0.141285017314579 * MC))
        + -4.67611404707418 * LSR_B
    ))

    H4_2 = tanh((
        -3.63601469818813
        + -0.0185867438078291* asinh((-143.832666963863 + 1.43672787674969 * FC))
        + 0.714664034975284 * asinh((-25.2433770668038 + 0.428714918219113 * WL))
        + -0.19720195247098 * asinh((-24.4715557253113 + 14.7602602070397 * ROD))
        + -1.11577151726427 * asinh((-7.88899309784633 + 0.220244583178519 * IP))
        + -2.63853407296712 * asinh((-3.15192082972475 + 0.141285017314579 * MC))
        + 5.38912985585026  * LSR_B
    ))

    H4_3 = tanh((
        20.8327216025248
        + 2.73601429603248  * asinh((-143.832666963863 + 1.43672787674969 * FC))
        + -1.82009804068773 * asinh((-25.2433770668038 + 0.428714918219113 * WL))
        + -0.712532926192075* asinh((-24.4715557253113 + 14.7602602070397 * ROD))
        + -0.191771821438097* asinh((-7.88899309784633 + 0.220244583178519 * IP))
        + -0.599486518650793* asinh((-3.15192082972475 + 0.141285017314579 * MC))
        + -15.5449406399191 * LSR_B
    ))

    H4_4 = tanh((
        -8.22068162776629
        + -2.79809178457807 * asinh((-143.832666963863 + 1.43672787674969 * FC))
        + 0.746969805393007 * asinh((-25.2433770668038 + 0.428714918219113 * WL))
        + -3.39661563168676 * asinh((-24.4715557253113 + 14.7602602070397 * ROD))
        + 0.054747856994957 * asinh((-7.88899309784633 + 0.220244583178519 * IP))
        + 2.138584038155    * asinh((-3.15192082972475 + 0.141285017314579 * MC))
        + 0.51715633929576  * LSR_B
    ))

    H4_5 = tanh((
        -7.53764048250827
        + -1.12055642311352 * asinh((-143.832666963863 + 1.43672787674969 * FC))
        + -1.14930006874535 * asinh((-25.2433770668038 + 0.428714918219113 * WL))
        + 3.19305968334605  * asinh((-24.4715557253113 + 14.7602602070397 * ROD))
        + -2.20615683226641 * asinh((-7.88899309784633 + 0.220244583178519 * IP))
        + 1.62318722502098  * asinh((-3.15192082972475 + 0.141285017314579 * MC))
        + -0.487491700169112* LSR_B
    ))

    H4_6 = tanh((
        0.577836355365134
        + 0.0369531762450438* asinh((-143.832666963863 + 1.43672787674969 * FC))
        + 0.231611897997748 * asinh((-25.2433770668038 + 0.428714918219113 * WL))
        + -0.44528218983477 * asinh((-24.4715557253113 + 14.7602602070397 * ROD))
        + 4.58327061334365  * asinh((-7.88899309784633 + 0.220244583178519 * IP))
        + -3.8225254812759  * asinh((-3.15192082972475 + 0.141285017314579 * MC))
        + 7.40487966272251  * LSR_B
    ))

    COH_Pred = (
        58.2507610826764
        + -105.838646123455 * H3_1
        + 48.4088524261427  * H3_2
        + 17.4182366937155  * H3_3
        + -17.6134266247196 * H3_4
        + 18.0347237447956  * H3_5
        + 44.8538353929525  * H3_6
        + -8.72291051225233 * H3_7
        + -105.250816712983 * H3_8
    )

    PHI_Pred = (
        3.4200512099551
        + -1.70767179681988 * H4_1
        + 2.86247630438744  * H4_2
        + 2.79447083244468  * H4_3
        + -1.67741291866135 * H4_4
        + -3.52393917258964 * H4_5
        + -3.15892657376738 * H4_6
    )

    return round(max(COH_Pred, 0), 2), round(max(PHI_Pred, 0), 2)

def predict_cu_argile(FC, WL, IP, MC, SR, ROD):
    # ---- type safety ----
    try:
        FC, WL, IP, MC, SR, ROD = map(float, (FC, WL, IP, MC, SR, ROD))
    except Exception as e:
        raise ValueError(
            f"type coercion failed in predict_cu_argile: "
            f"FC={FC!r}, WL={WL!r}, IP={IP!r}, MC={MC!r}, SR={SR!r}, ROD={ROD!r} ({e})"
        )

    # ---- domain guards for log() terms ----
    # log((FC - 39.7159967634967) / (101 - FC))           -> 39.7159967634967 < FC < 101
    # log((WL - 20.81677306816) / (134.127215999133 - WL)) -> 20.81677306816  < WL < 134.127215999133
    # log((33.058349992554 + IP) / (1217.19720674159 - IP)) -> IP < 1217.19720674159 (always true in your UI)
    EPS = 1e-6
    FC  = max(39.7159967634967 + EPS, min(101.0 - EPS, FC))
    WL  = max(20.81677306816   + EPS, min(134.127215999133 - EPS, WL))
    IP  = min(1217.19720674159 - EPS, IP)

    # Reusable logs
    LFC = log((FC - 39.7159967634967) / (101.0 - FC))
    LWL = log((WL - 20.81677306816)   / (134.127215999133 - WL))
    LIP = log((33.058349992554 + IP)  / (1217.19720674159 - IP))

    # ---- H5_* (remove the erroneous square brackets) ----
    H5_1 = tanh((
        4.40634757120724
        + 0.039944594105884 * FC
        + -0.687080088439711 * IP
        + 0.148904611838327 * SR
        + 0.26267458889412  * WL
        + -6.86171818434699 * ROD
        + -0.238673591619461* MC
    ))
    H5_2 = tanh((
        -2.01765406534225
        + 0.0736385624182563 * FC
        + 0.0739502593218436 * IP
        + -0.169211744864538 * SR
        + -0.259143449582985 * WL
        + 14.7961317529012  * ROD
        + -0.217372403705055 * MC
    ))
    H5_3 = tanh((
        4.73719016092858
        + -0.0143479288585472 * FC
        + 0.245665531636006  * IP
        + -0.0635870194576407* SR
        + -0.0660694943602207* WL
        + -1.20106846803562  * ROD
        + 0.0287239257652119 * MC
    ))
    H5_4 = tanh((
        -20.7761497437449
        + -0.0203076625839383* FC
        + 0.482420964150679 * IP
        + 0.00615652648214472* SR
        + -0.0204781578566195* WL
        + 3.65012149766464  * ROD
        + 0.267598760168848 * MC
    ))
    H5_5 = tanh((
        72.6847591322074
        + -0.137670914663382* FC
        + -1.19491373339579 * IP
        + -0.195381403145063* SR
        + -0.0922892507747646* WL
        + -3.79203358374005 * ROD
        + -0.221881547282392* MC
    ))
    H5_6 = tanh((
        11.8467204309568
        + 0.102820049757323 * FC
        + -0.181687839906805* IP
        + -0.202781605426793* SR
        + -0.251971054119054* WL
        + 15.2418015091208  * ROD
        + -0.667543545391875* MC
    ))

    # ---- H6_* (unchanged structure; using shared logs) ----
    H6_1 = tanh((
        -16.7627843025451
        + 0.578511107421861  * asinh((-32.7422318808342 + 0.336503687552913 * SR))
        + -9.69982823277293  * asinh((-3.76473188429744 + 1.65175327686301 * ROD))
        + 2.30197008446522   * asinh((-3.55133294828129 + 0.214628239087094 * MC))
        + -1.48024479033148  * LFC
        + -0.132687988135113 * LWL
        + -2.99552713864465  * LIP
    ))
    H6_2 = tanh((
        -25.2126512015149
        + 2.49038538735933   * asinh((-32.7422318808342 + 0.336503687552913 * SR))
        + -17.9184279307697  * asinh((-3.76473188429744 + 1.65175327686301 * ROD))
        + -1.51347679744937  * asinh((-3.55133294828129 + 0.214628239087094 * MC))
        + 2.02812864419191   * LFC
        + -4.00825935545313  * LWL
        + -2.31251993928849  * LIP
    ))
    H6_3 = tanh((
        -99.3228222347462
        + 1.1089319976126    * asinh((-32.7422318808342 + 0.336503687552913 * SR))
        + -18.2485690534082  * asinh((-3.76473188429744 + 1.65175327686301 * ROD))
        + 0.304022363207746  * asinh((-3.55133294828129 + 0.214628239087094 * MC))
        + 0.478771557320301  * LFC
        + -2.34226970019505  * LWL
        + -25.7355973131869  * LIP
    ))
    H6_4 = tanh((
        50.7768327219086
        + -1.23065626522706  * asinh((-32.7422318808342 + 0.336503687552913 * SR))
        + 4.2845179596645    * asinh((-3.76473188429744 + 1.65175327686301 * ROD))
        + -1.63314949850255  * asinh((-3.55133294828129 + 0.214628239087094 * MC))
        + 2.25583391025698   * LFC
        + -3.51683710316034  * LWL
        + 17.7115196401183   * LIP
    ))
    H6_5 = tanh((
        81.6328371884601
        + 0.86469187179592   * asinh((-32.7422318808342 + 0.336503687552913 * SR))
        + 0.290131436804171  * asinh((-3.76473188429744 + 1.65175327686301 * ROD))
        + -0.975701876095027 * asinh((-3.55133294828129 + 0.214628239087094 * MC))
        + 2.2284956257505    * LFC
        + 5.48335460440432   * LWL
        + 26.0542809256103   * LIP
    ))
    H6_6 = tanh((
        16.3500572308571
        + -0.979698273619775 * asinh((-32.7422318808342 + 0.336503687552913 * SR))
        + 11.0771236098675   * asinh((-3.76473188429744 + 1.65175327686301 * ROD))
        + 1.32777164520128   * asinh((-3.55133294828129 + 0.214628239087094 * MC))
        + -0.430622632627246 * LFC
        + 0.417644562949462  * LWL
        + 2.27606047549037   * LIP
    ))
    H6_7 = tanh((
        4.17075337437927
        + -0.150753181293872 * asinh((-32.7422318808342 + 0.336503687552913 * SR))
        + 0.477771099400629  * asinh((-3.76473188429744 + 1.65175327686301 * ROD))
        + 0.964275539704788  * asinh((-3.55133294828129 + 0.214628239087094 * MC))
        + 0.13271356099786   * LFC
        + -0.870165811505682 * LWL
        + 1.18536261327087   * LIP
    ))
    H6_8 = tanh((
        20.2148578628064
        + 1.49396408485993   * asinh((-32.7422318808342 + 0.336503687552913 * SR))
        + -0.0194708798300999* asinh((-3.76473188429744 + 1.65175327686301 * ROD))
        + -0.652752148960384 * asinh((-3.55133294828129 + 0.214628239087094 * MC))
        + 1.21372545093061   * LFC
        + 1.21663445877428   * LWL
        + 6.45471739919401   * LIP
    ))

    COH_Pred = (
        0.19746935736731
        + -0.436884625477234 * H5_1
        + -1.07205420546772  * H5_2
        + -0.527482128552582 * H5_3
        + -0.366631049895877 * H5_4
        + -0.414940640210656 * H5_5
        + 1.0582505753037    * H5_6
    )

    PHI_Pred = (
        12.9436839669473
        + -4.21460335498156 * H6_1
        + 5.17906515078691  * H6_2
        + 4.99654365055834  * H6_3
        + -4.731178719651   * H6_4
        + 2.38180169749245  * H6_5
        + 11.2139053175172  * H6_6
        + 3.25911198089505  * H6_7
        + 0.41966273390397  * H6_8
    )

    return round(max(COH_Pred, 0), 2), round(max(PHI_Pred, 0), 2)

def predict_cu_limon_marne(FC, WL, IP, MC, SR, ROD):
    # ---- type safety ----
    try:
        FC, WL, IP, MC, SR, ROD = map(float, (FC, WL, IP, MC, SR, ROD))
    except Exception as e:
        raise ValueError(
            f"type coercion failed in predict_cu_limon_marne: "
            f"FC={FC!r}, WL={WL!r}, IP={IP!r}, MC={MC!r}, SR={SR!r}, ROD={ROD!r} ({e})"
        )

    # ---- domain guards for log() terms (open intervals) ----
    # log((WL - 21.51) / (93.6159219346944 - WL))           -> 21.51 < WL < 93.6159219346944
    # log((IP - 5.39) / (76.57 - IP))                        -> 5.39  < IP < 76.57
    # log((MC - 0.598900891180556) / (110.469298671389 - MC))-> 0.598900891180556 < MC < 110.469298671389
    # log((FC - 0.48) / (100.6 - FC))                        -> 0.48  < FC < 100.6
    EPS = 1e-6
    WL = max(21.51 + EPS, min(93.6159219346944 - EPS, WL))
    IP = max(5.39 + EPS,  min(76.57 - EPS, IP))
    MC = max(0.598900891180556 + EPS, min(110.469298671389 - EPS, MC))
    FC = max(0.48 + EPS,  min(100.6 - EPS, FC))

    # Precompute reusable logs
    LWL = log((WL - 21.51) / (93.6159219346944 - WL))
    LIP = log((IP - 5.39) / (76.57 - IP))
    LMC = log((MC - 0.598900891180556) / (110.469298671389 - MC))
    LFC = log((FC - 0.48) / (100.6 - FC))

    # ---------------- H7_* ----------------
    H7_1 = tanh((
        10.6655759119439
        + -2.2556426684022 * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + -15.12319550355  * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 0.363669897571457 * LWL
        + -0.648824622468809 * LIP
        + 19.6248514754121  * LMC
        + 3.89378838141429  * LFC
    ))
    H7_2 = tanh((
        -13.2955510629545
        + -1.81159686124008 * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + -7.49928877047463 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 0.227378661765587 * LWL
        + 0.452800483404528 * LIP
        + -4.18452754622229 * LMC
        + 0.565004019701216 * LFC
    ))
    H7_3 = tanh((
        -7.60206727920722
        + -0.767371910612273 * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + -7.89037082208549 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 5.91654371477501  * LWL
        + -4.52628712884415 * LIP
        + 4.14946969249613  * LMC
        + 1.64478446489692  * LFC
    ))
    H7_4 = tanh((
        20.9573405480362
        + -3.29385952837203 * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + 9.1407322062712   * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + -4.17377155484157 * LWL
        + 2.48479754709231  * LIP
        + 17.1565586099743  * LMC
        + 2.79489807340979  * LFC
    ))
    H7_5 = tanh((
        -8.39380573741833
        + 3.06707985578443  * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + -0.338417854710106* asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 7.6532480029125   * LWL
        + -6.41937014645368 * LIP
        + -11.3650091124615 * LMC
        + -2.5525995115779  * LFC
    ))
    H7_6 = tanh((
        27.8861180649745
        + 0.505502406428157 * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + 27.0362185793401  * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + -4.60969395128701 * LWL
        + -7.40499888146563 * LIP
        + 5.12432738637691  * LMC
        + -1.95041162956377 * LFC
    ))
    H7_7 = tanh((
        -8.28731648244738
        + 1.6368307810563   * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + -1.51096133160996 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 3.50817652836696  * LWL
        + -0.749577064101078* LIP
        + -7.19568488857673 * LMC
        + -0.734797943388052* LFC
    ))
    H7_8 = tanh((
        0.663708712091919
        + -3.01111608995407 * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + -0.434117589041413* asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 1.22416304465614  * LWL
        + -10.1556410511783 * LIP
        + 10.1645569217724  * LMC
        + 1.44404305090545  * LFC
    ))

    # ---------------- H8_* ----------------
    H8_1 = tanh((
        11.756187543949
        + -0.146611267919422* asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + 28.4094772413339 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 0.601097804538211 * LWL
        + 0.134054452582731 * LIP
        + -3.46043614865951 * LMC
        + 0.756879678143737 * LFC
    ))
    H8_2 = tanh((
        -6.42647618757773
        + -0.796863300256902* asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + -4.02394931999584 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 4.3994612510131   * LWL
        + -4.51607298677233 * LIP
        + -0.0216595193390179* LMC
        + -0.0270406536728484* LFC
    ))
    H8_3 = tanh((
        -3.26210197116668
        + -0.87596306455302 * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + -3.09926765951826 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 0.318848765108183 * LWL
        + 4.19730230684302  * LIP
        + -2.2243351273941  * LMC
        + -0.403327489895018* LFC
    ))
    H8_4 = tanh((
        2.15651214514086
        + 0.0681201074010989* asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + 2.73561658217308 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 2.492936401943    * LWL
        + 2.0747026295636   * LIP
        + -0.253993719435073* LMC
        + 0.473498293093698 * LFC
    ))
    H8_5 = tanh((
        0.803220309893366
        + 0.081096308276856 * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + 0.568427142763437 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 1.81288494375132  * LWL
        + 0.901927413212479 * LIP
        + 0.219104337596294 * LMC
        + 1.04478454164848  * LFC
    ))
    H8_6 = tanh((
        -1.84818708309783
        + -0.502502654404091* asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + 0.597103910464335 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 0.19733945091091  * LWL
        + -3.49966242072708 * LIP
        + 5.32070194598757  * LMC
        + 1.78142583984681  * LFC
    ))
    H8_7 = tanh((
        1.74324617934287
        + -0.0426903010799399* asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + 5.27296111743721 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + -0.00392368642434081* LWL
        + -0.0988635488565905* LIP
        + -1.40111778104911 * LMC
        + -1.36871103617653 * LFC
    ))
    H8_8 = tanh((
        -9.54906903558555
        + 0.61245508401709  * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + -11.5998816878234 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + 1.85861374048782  * LWL
        + -0.0318012683522585* LIP
        + -4.01545649685757 * LMC
        + -0.261524504054834* LFC
    ))
    H8_9 = tanh((
        2.24785225786722
        + 0.586417534804338 * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + 2.74928606516391 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + -2.81485667452777 * LWL
        + 2.9130382477444   * LIP
        + -0.498131536001015* LMC
        + -0.0151205883900917* LFC
    ))
    H8_10 = tanh((
        1.25262639328899
        + 0.409850121616897 * asinh((-12.9333571202975 + 0.133976058159129 * SR))
        + 0.564786923032724 * asinh((-4.63103120320287 + 2.32648222813236 * ROD))
        + -0.277582916690019* LWL
        + -0.198565181197782* LIP
        + 0.0109306838758657* LMC
        + -0.0314734571843468* LFC
    ))

    COH_Pred = (
        0.278053979725811
        + 0.0977763737447531 * H7_1
        + -0.084840798518664 * H7_2
        + -0.414613329877799 * H7_3
        + 0.703212470089846  * H7_4
        + 0.734946154489113  * H7_5
        + -0.319618690482818 * H7_6
        + 0.253304247495326  * H7_7
        + 0.244100727069484  * H7_8
    )

    PHI_Pred = (
        22.0827694776398
        + -0.139734364554473 * H8_1
        + 1.95296575159638   * H8_10
        + -8.12839789431866  * H8_2
        + 5.1899508293572    * H8_3
        + 3.238846530047     * H8_4
        + -4.0359304772313   * H8_5
        + 5.08223831465232   * H8_6
        + -3.32450622032966  * H8_7
        + -6.08795839555614  * H8_8
        + -6.14414559679645  * H8_9
    )

    return round(max(COH_Pred, 0), 2), round(max(PHI_Pred, 0), 2)

def predict_cd_argile(FC, WL, IP, MC, SR, ROD):
    # ---- type safety ----
    try:
        FC, WL, IP, MC, SR, ROD = map(float, (FC, WL, IP, MC, SR, ROD))
    except Exception as e:
        raise ValueError(
            f"type coercion failed in predict_cd_argile: "
            f"FC={FC!r}, WL={WL!r}, IP={IP!r}, MC={MC!r}, SR={SR!r}, ROD={ROD!r} ({e})"
        )

    # ---- domain guards for log() terms (open intervals) ----
    # log((SR - 73) / (100.22 - SR))                       -> 73 < SR < 100.22
    # log((FC - 37.2336318739882) / (101 - FC))            -> 37.2336318739882 < FC < 101
    # log((MC - 11) / (42.56 - MC))                        -> 11 < MC < 42.56
    # log((ROD - 1.29) / (1.92 - ROD))                     -> 1.29 < ROD < 1.92
    # log((3723.26299720762 + WL) / (960.694572344235 - WL))->             WL < 960.694572344235
    EPS = 1e-6
    SR  = max(73.0 + EPS,                min(100.22 - EPS, SR))
    FC  = max(37.2336318739882 + EPS,    min(101.0  - EPS, FC))
    MC  = max(11.0 + EPS,                min(42.56  - EPS, MC))
    ROD = max(1.29 + EPS,                min(1.92   - EPS, ROD))
    WL  = min(960.694572344235 - EPS, WL)  # lower bound not required (numerator is > 0)

    # ---- precompute logs ----
    LSR  = log((SR  - 73.0)                 / (100.22 - SR))
    LFC  = log((FC  - 37.2336318739882)     / (101.0  - FC))
    LMC  = log((MC  - 11.0)                 / (42.56  - MC))
    LROD = log((ROD - 1.29)                 / (1.92   - ROD))
    LWL  = log((3723.26299720762 + WL)      / (960.694572344235 - WL))

    # ---------------- H9_* ----------------
    H9_1  = tanh(118.631382305179  + -1.57264878124331 * asinh((-6.26085643013697 + 0.225172371101822 * IP)) + -0.136550024460989 * LSR + -1.09314212917131 * LFC + 0.309899832638752 * LMC + -2.29969519565056 * LROD + -81.9761588208792  * LWL)
    H9_2  = tanh(-51.5590970526852 + -1.08711871803976 * asinh((-6.26085643013697 + 0.225172371101822 * IP)) + -0.462598594548651 * LSR + -1.17720558585425 * LFC + 0.885060937432622 * LMC + -1.36274477994558 * LROD + 38.3659193338671  * LWL)
    H9_3  = tanh(-48.9847224050387 + -1.99935993460002 * asinh((-6.26085643013697 + 0.225172371101822 * IP)) + -0.522594924002599 * LSR + 0.0288085233631829 * LFC + -0.819586016369992 * LMC + -0.775821545712605 * LROD + 33.8296390719935  * LWL)
    H9_4  = tanh(-50.472590645283  + -1.9894550983926  * asinh((-6.26085643013697 + 0.225172371101822 * IP)) + -0.749140411244355 * LSR + -0.00221154376845194 * LFC + 0.448937839303939 * LMC + -0.396088399578754 * LROD + 36.454213996006   * LWL)
    H9_5  = tanh(-31.6561697385636 + -0.812180016329309* asinh((-6.26085643013697 + 0.225172371101822 * IP)) + 0.095879685965328 * LSR + 0.779572840263073 * LFC + -0.0778204415494624 * LMC + -1.02472049035412 * LROD + 20.5864132380105  * LWL)
    H9_6  = tanh(-42.0213368292305 + -0.780814765549608* asinh((-6.26085643013697 + 0.225172371101822 * IP)) + 0.50539683297306  * LSR + 0.49541440104015  * LFC + -0.230172258907154 * LMC + 1.40956747958921  * LROD + 28.0536721108694  * LWL)
    H9_7  = tanh(144.308472775254  + -2.24565650219585 * asinh((-6.26085643013697 + 0.225172371101822 * IP)) + 0.152169190392742 * LSR + -0.962144774281004 * LFC + -0.514253684456529 * LMC + -1.01176412158221 * LROD + -99.569209405738  * LWL)
    H9_8  = tanh(222.244382213618  + -1.35138034675885 * asinh((-6.26085643013697 + 0.225172371101822 * IP)) + -0.200202444895863* LSR + 0.0493171102494664* LFC + -0.0730827761934445* LMC + -1.0770936134792 * LROD + -154.771079047795 * LWL)
    H9_9  = tanh(-63.2581231030646 + 0.0595623578542521* asinh((-6.26085643013697 + 0.225172371101822 * IP)) + 0.698454146696063 * LSR + 0.153154565017817 * LFC + 1.06842132576117  * LMC + -0.328538092130006* LROD + 43.4601551505314  * LWL)
    H9_10 = tanh(2.34110213692709  + 0.305934947743459 * asinh((-6.26085643013697 + 0.225172371101822 * IP)) + -0.717223304017974* LSR + -0.665169443737726* LFC + -0.508665534933975* LMC + 0.766761895295875 * LROD + -0.290756893620369* LWL)

    # ---------------- H10_* ----------------
    H10_1  = tanh(-8.84113024412096 + -0.351551894501234* asinh((-6.26085643013697 + 0.225172371101822 * IP)) + 0.172860838871236 * LSR + 0.38939913360438  * LFC + -1.54277784764933 * LMC + 20.2426989954033  * LROD + 4.55722432239996  * LWL)
    H10_2  = tanh(-28.6505699970428 + 0.174802870546987 * asinh((-6.26085643013697 + 0.225172371101822 * IP)) + 0.0612141919570711* LSR + 0.00835090574100541* LFC + -0.0766967720587419* LMC + 0.860038656771219 * LROD + 19.6359128017525  * LWL)
    H10_3  = tanh(4.26354677571542  + -1.17646624831267 * asinh((-6.26085643013697 + 0.225172371101822 * IP)) + 0.157680203586349 * LSR + -0.463097143743479* LFC + -1.21015928984731 * LMC + -0.137605881440462* LROD + -2.66307389632878 * LWL)
    H10_4  = tanh(220.672146486517  + -2.20463706181594 * asinh((-6.26085643013697 + 0.225172371101822 * IP)) + 1.20041654119651  * LSR + 0.00918626206103224* LFC + 1.59347865163386  * LMC + 0.530888206126177 * LROD + -155.966350498822 * LWL)
    H10_5  = tanh(-124.568744463443 + -1.47838570970307* asinh((-6.26085643013697 + 0.225172371101822 * IP)) + 0.75943930196593  * LSR + -1.66995725640764* LFC + 1.49317161490216  * LMC + 0.353396726989996 * LROD + 89.2899753368175  * LWL)
    H10_6  = tanh(276.000910303458  + 1.66077879367581 * asinh((-6.26085643013697 + 0.225172371101822 * IP)) + -0.0858017794735997* LSR + -1.01935936853416* LFC + 0.0512343164780557* LMC + -0.00818768021684769* LROD + -191.466105431332 * LWL)
    H10_7  = tanh(190.017720368151  + -0.348745681932452* asinh((-6.26085643013697 + 0.225172371101822 * IP)) + -0.200072413251975* LSR + 0.896160057379097 * LFC + -1.78123594883332 * LMC + -0.819893532883926* LROD + -136.480421949893 * LWL)
    H10_8  = tanh(-232.112437184356 + -0.182715972431285* asinh((-6.26085643013697 + 0.225172371101822 * IP)) + 0.175739296879348 * LSR + 0.889219805480997 * LFC + 0.0845617637146124* LMC + 0.425487101974321 * LROD + 160.164723217194  * LWL)
    H10_9  = tanh(74.5748562371714  + 1.46407288977623 * asinh((-6.26085643013697 + 0.225172371101822 * IP)) + -0.343938876010072* LSR + 0.0927569928447701* LFC + -0.166933977759113* LMC + -0.157383540010381* LROD + -51.4911769989828 * LWL)
    H10_10 = tanh(48.9921946962997  + -1.96293431949113* asinh((-6.26085643013697 + 0.225172371101822 * IP)) + -0.1539841283534  * LSR + -0.134956535058093* LFC + 0.985613769503144 * LMC + -1.28604347534932 * LROD + -34.0109265722271 * LWL)

    COH_Pred = (
        0.607011986050765
        + 0.678994466326714 * H9_1
        + 0.851664949697435 * H9_10
        + -0.944920438171447* H9_2
        + -0.633658172923727* H9_3
        + 0.79013561947807  * H9_4
        + 0.185216433369176 * H9_5
        + -0.372553742304047* H9_6
        + 0.449862875755917 * H9_7
        + -0.512682848392776* H9_8
        + 0.853309598099189 * H9_9
    )

    PHI_Pred = (
        14.6212728805716
        + -1.36578769733323 * H10_1
        + -1.73098398502371 * H10_10
        + -0.511202547021407* H10_2
        + 0.974900260677129 * H10_3
        + -4.51850009281115 * H10_4
        + 6.26460093599074  * H10_5
        + -3.6082998534617  * H10_6
        + 4.87744274943769  * H10_7
        + -4.83634513746942 * H10_8
        + -1.34927095344767 * H10_9
    )

    return round(max(COH_Pred, 0), 2), round(max(PHI_Pred, 0), 2)

def predict_cd_sable(FC, WL, IP, MC, SR, ROD):
    # ---- type safety ----
    try:
        FC, WL, IP, MC, SR, ROD = map(float, (FC, WL, IP, MC, SR, ROD))
    except Exception as e:
        raise ValueError(
            f"type coercion failed in predict_cd_sable: "
            f"FC={FC!r}, WL={WL!r}, IP={IP!r}, MC={MC!r}, SR={SR!r}, ROD={ROD!r} ({e})"
        )

    # ---- domain guards for log() terms (open intervals) ----
    # log((WL - 28)/(56.6 - WL))                             -> 28 < WL < 56.6
    # log((FC - 7.91434817785376)/(47.0514612590705 - FC))   -> 7.9143.. < FC < 47.05146..
    # log((ROD - 1.62)/(1.98 - ROD))                         -> 1.62 < ROD < 1.98
    # log((31.1381707022798 + MC)/(2867.57806229012 - MC))   ->              MC < 2867.57806..
    EPS = 1e-6
    WL  = max(28.0 + EPS,                 min(56.6 - EPS, WL))
    FC  = max(7.91434817785376 + EPS,     min(47.0514612590705 - EPS, FC))
    ROD = max(1.62 + EPS,                 min(1.98 - EPS, ROD))
    MC  = min(2867.57806229012 - EPS, MC)   # lower bound not needed (numerator > 0)

    # ---- precompute logs (safe) ----
    LWL  = log((WL  - 28.0)                     / (56.6 - WL))
    LFC  = log((FC  - 7.91434817785376)         / (47.0514612590705 - FC))
    LROD = log((ROD - 1.62)                     / (1.98 - ROD))
    LMC  = log((31.1381707022798 + MC)          / (2867.57806229012 - MC))

    # ---------------- H11_* ----------------
    H11_1 = tanh(134.315033726767 + -1.81344623164961 * asinh((-7410.59214685082 + 71.9167479034667 * SR))
                 + 4.39382605154556 * asinh((-50.0397680320744 + 3.72190510097577 * IP))
                 + -0.316093027824709 * LWL + 0.34274041679094 * LFC
                 + -0.0750513532981911 * LROD + 40.0798836003073 * LMC)

    H11_2 = tanh(-11.5744225480045 + -0.304358413736981 * asinh((-7410.59214685082 + 71.9167479034667 * SR))
                 + 0.0220514417449844 * asinh((-50.0397680320744 + 3.72190510097577 * IP))
                 + -0.653058828950182 * LWL + -0.154377605185765 * LFC
                 + 0.316362901569235 * LROD + -2.05898110617538 * LMC)

    H11_3 = tanh(9.39629256050876 + 0.463398155537604 * asinh((-7410.59214685082 + 71.9167479034667 * SR))
                 + 0.0288728040979267 * asinh((-50.0397680320744 + 3.72190510097577 * IP))
                 + 0.904588390606095 * LWL + -0.132206377701914 * LFC
                 + 1.17066228112246 * LROD + 1.0941158806633 * LMC)

    H11_4 = tanh(-26.1692514868869 + 0.666800717720859 * asinh((-7410.59214685082 + 71.9167479034667 * SR))
                 + 2.05677687373903 * asinh((-50.0397680320744 + 3.72190510097577 * IP))
                 + -0.558370940315641 * LWL + -0.198602242126532 * LFC
                 + -1.15407194917223 * LROD + -5.65320907770142 * LMC)

    H11_5 = tanh(13.3352975076882 + 0.0557852942095552 * asinh((-7410.59214685082 + 71.9167479034667 * SR))
                 + -0.735944765093118 * asinh((-50.0397680320744 + 3.72190510097577 * IP))
                 + -0.452837153668361 * LWL + -0.0485109002051569 * LFC
                 + -0.131191821472461 * LROD + 2.49201436100093 * LMC)

    H11_6 = tanh(71.7193157351221 + -1.60456911215699 * asinh((-7410.59214685082 + 71.9167479034667 * SR))
                 + -1.30489112725194 * asinh((-50.0397680320744 + 3.72190510097577 * IP))
                 + -1.51703404431077 * LWL + 0.2244020983011 * LFC
                 + 0.00110219391417988 * LROD + 19.8251195990047 * LMC)

    # ---------------- H12_* ----------------
    H12_1 = tanh(400.290094624101 + -6.77422751235908 * asinh((-50.0397680320744 + 3.72190510097577 * IP))
                 + 4.40159190484623 * LWL + 1.712860880889 * LFC
                 + 3.30371535049122 * LROD + 96.9983339988029 * LMC)

    H12_2 = tanh(-405.287947095666 + -3.70157353915695 * asinh((-50.0397680320744 + 3.72190510097577 * IP))
                 + -3.82115458521381 * LWL + -2.10520041279181 * LFC
                 + 4.37754565869487 * LROD + -99.2012212533089 * LMC)

    H12_3 = tanh(177.883204840689 + 13.6435909350145 * asinh((-50.0397680320744 + 3.72190510097577 * IP))
                 + -6.62904543245173 * LWL + 0.553120838474522 * LFC
                 + 3.82529431337683 * LROD + 64.1866191036278 * LMC)

    H12_4 = tanh(215.78624629564 + 1.49654966856398 * asinh((-50.0397680320744 + 3.72190510097577 * IP))
                 + -0.658527885086345 * LWL + 0.399246712088403 * LFC
                 + 3.48748081697373 * LROD + 59.9646766012768 * LMC)

    H12_5 = tanh(-0.762914248982638 + -0.155076344941293 * asinh((-50.0397680320744 + 3.72190510097577 * IP))
                 + -0.227405337973893 * LWL + 2.96142601234647 * LFC
                 + -2.40097747239522 * LROD + 5.57794878403485 * LMC)

    H12_6 = tanh(8.76070627276075 + 0.18238567743045 * asinh((-50.0397680320744 + 3.72190510097577 * IP))
                 + -0.427539075650761 * LWL + -1.75511992633477 * LFC
                 + 2.48789186943758 * LROD + -4.15815031242899 * LMC)

    COH_Pred = (
        0.245485431816551
        + 0.361785038819086 * H11_1
        + 0.310578224221505 * H11_2
        + -0.38745290712311  * H11_3
        + -0.490704912378874 * H11_4
        + 0.752966456011811 * H11_5
        + -0.778181940287861* H11_6
    )

    PHI_Pred = (
        16.0737151675929
        + -3.72574501399432 * H12_1
        + -3.68091942599594 * H12_2
        + -13.4243187162494 * H12_3
        + 14.7512481368729  * H12_4
        + 5.71259050116177  * H12_5
        + 5.45575576435816  * H12_6
    )

    return round(max(COH_Pred, 0), 2), round(max(PHI_Pred, 0), 2)
